sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
prepare_plot_data <- function(
project_folder,
input_folder,
profile_data_suffix,
sources,
protein,
output_folder,
sd_multiplier_for_cutoff,
only_proteins_above,
only_proteins_below
) {
# CALCULATE CUTOFF
normalization_global_statistics_file <- sprintf("%s/outputs/01_pools_normalized_data/global_statistics.tsv", project_folder)
normalization_global_statistics <- fread(normalization_global_statistics_file, header = TRUE, sep = "\t", na.strings = NULL)
mode_aux <- normalization_global_statistics$mode
sd_aux <- normalization_global_statistics$sd
# PLOT DATA
plot_data_folder <- input_folder
plot_data_file_suffix <- profile_data_suffix
output_file_prefix <- sprintf("protein_profiles_cruzi_withLE_%sSD", sd_multiplier_for_cutoff)
has_negative_data <- 0
positive_serum_label <- "Positive serum"
negative_serum_label <- "Negative serum"
threshold_label <- "Threshold"
pdf_height <- 21
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
#protein = "TCSYLVIO_001348"
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
write.table(index_data, file = sprintf("%s/%s_index.tsv", output_folder, output_file_prefix),
col.names = T, row.names = F, sep = "\t", quote = T)
return(list(all_plot_data = all_plot_data, plot_order = plot_order, proteins_to_plot = proteins_to_plot))
}
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
protein <- NULL
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
protein
!is.null(protein)
is.null(protein)
# CALCULATE CUTOFF
normalization_global_statistics_file <- sprintf("%s/outputs/01_pools_normalized_data/global_statistics.tsv", project_folder)
normalization_global_statistics <- fread(normalization_global_statistics_file, header = TRUE, sep = "\t", na.strings = NULL)
mode_aux <- normalization_global_statistics$mode
sd_aux <- normalization_global_statistics$sd
# PLOT DATA
plot_data_folder <- input_folder
plot_data_file_suffix <- profile_data_suffix
output_file_prefix <- sprintf("protein_profiles_cruzi_withLE_%sSD", sd_multiplier_for_cutoff)
has_negative_data <- 0
positive_serum_label <- "Positive serum"
negative_serum_label <- "Negative serum"
threshold_label <- "Threshold"
pdf_height <- 21
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
#protein = "TCSYLVIO_001348"
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
write.table(index_data, file = sprintf("%s/%s_index.tsv", output_folder, output_file_prefix),
col.names = T, row.names = F, sep = "\t", quote = T)
return(list(all_plot_data = all_plot_data, plot_order = plot_order, proteins_to_plot = proteins_to_plot))
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
protein = protein,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
all_plot_data <- plot_data_result$all_plot_data
plot_order <- plot_data_result$plot_order
proteins_to_plot <- plot_data_result$proteins_to_plot
View(all_plot_data)
View(plot_order)
output_file_prefix
output_suffix <- "mean_1_median_5"
sprintf("%s/%s_%s_index.tsv", output_folder, output_file_prefix, output_suffix)
output_file_prefix
output_file_prefix <- if (is.null(protein)) {
sprintf("protein_profiles_cruzi_%sSD", sd_multiplier_for_cutoff)
} else {
sprintf("protein_profiles_cruzi_%sSD_selected_proteins", sd_multiplier_for_cutoff)
}
output_file_prefix
output_file_name <- if (is.null(output_suffix)) {
sprintf("%s/%s_index.tsv", output_folder, output_file_prefix)
} else {
sprintf("%s/%s_%s_index.tsv", output_folder, output_file_prefix, output_suffix)
}
output_file_name
testing <- TRUE
sources <- c("AR", "BO", "BR", "CO", "MX", "US", "LE")
profile_data_suffix <- "smoothed.tsv"
protein <- NULL
sd_multiplier_for_cutoff <- 4
only_proteins_above <- 0
only_proteins_below <- 0
output_suffix <- NULL
protein <- "TcCLB.511671.60"
profile_data_suffix <- "mean_1_median_5"
args <- c(
"--protein", "TcCLB.511671.60",
"--profile_data_suffix", "mean_1_median_5"
)
testing <- TRUE
sources <- c("AR", "BO", "BR", "CO", "MX", "US", "LE")
profile_data_suffix <- "smoothed.tsv"
protein <- NULL
sd_multiplier_for_cutoff <- 4
only_proteins_above <- 0
only_proteins_below <- 0
output_suffix <- NULL
# User values
if (length(args) == 0) {
cat("No arguments provided. Using default values.\n")
} else {
# User values
for (i in seq(1, length(args), by = 2)) {
if (args[i] == "--main_folder") {
main_folder <- args[i + 1]
}
if (args[i] == "--testing") {
testing <- as.logical(args[i + 1])
}
if (args[i] == "--sources") {
sources <- unlist(strsplit(args[i + 1], ",")) # Divide sources si se pasan como cadena separada por comas
}
if (args[i] == "--profile_data_suffix") {
profile_data_suffix <- paste0(args[i + 1], "_smoothed.tsv")
output_suffix <- args[i + 1]
}
if (args[i] == "--protein") {
protein <- args[i + 1]
}
if (args[i] == "--sd_multiplier_for_cutoff") {
sd_multiplier_for_cutoff <- as.numeric(args[i + 1])
}
}
}
# Print values
cat("Main folder:", main_folder, "\n")
# Default values
main_folder <- "."
testing <- TRUE
sources <- c("AR", "BO", "BR", "CO", "MX", "US", "LE")
profile_data_suffix <- "smoothed.tsv"
protein <- NULL
sd_multiplier_for_cutoff <- 4
only_proteins_above <- 0
only_proteins_below <- 0
output_suffix <- NULL
# User values
if (length(args) == 0) {
cat("No arguments provided. Using default values.\n")
} else {
# User values
for (i in seq(1, length(args), by = 2)) {
if (args[i] == "--main_folder") {
main_folder <- args[i + 1]
}
if (args[i] == "--testing") {
testing <- as.logical(args[i + 1])
}
if (args[i] == "--sources") {
sources <- unlist(strsplit(args[i + 1], ",")) # Divide sources si se pasan como cadena separada por comas
}
if (args[i] == "--profile_data_suffix") {
profile_data_suffix <- paste0(args[i + 1], "_smoothed.tsv")
output_suffix <- args[i + 1]
}
if (args[i] == "--protein") {
protein <- args[i + 1]
}
if (args[i] == "--sd_multiplier_for_cutoff") {
sd_multiplier_for_cutoff <- as.numeric(args[i + 1])
}
}
}
# Print values
cat("Main folder:", main_folder, "\n")
cat("Testing:", testing, "\n")
cat("Sources:", paste(sources, collapse = ", "), "\n")
cat("Profile data suffix:", profile_data_suffix, "\n")
cat("Protein (optional):", protein, "\n")
cat("SD multiplier for cutoff>", sd_multiplier_for_cutoff, "\n")
#### PATH CONFIG ####
if (testing == TRUE) {
# For testing
project_folder <- sprintf("%s/test_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
} else {
# For running the actual data
project_folder <- sprintf("%s/chagastope_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
}
input_folder <- sprintf("%s/outputs/02_pools_smoothed_data", project_folder)
design_file <- sprintf("%s/inputs/01_pools_array_design/Supplementary File S08 - Mapping of CHAGASTOPE-v1 data to T cruzi proteins.tsv", project_folder)
output_folder <- sprintf("%s/outputs/11_plots", project_folder)
input_folder
design_file
output_folder
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
functions_folder <- sprintf("%s/functions", main_folder)
functions_folder
#### CALL MAIN FUNCTION ####
source(sprintf("%s/11_plot_protein_profiles_function.R", functions_folder))
plot_proteins(project_folder = project_folder,
input_folder = input_folder,
design_file = design_file,
sources = sources,
profile_data_suffix = profile_data_suffix,
output_folder = output_folder,
protein = protein,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
output_suffix = output_suffix)
output_file
output_file <- sprintf("%s/%s_fixed_scale.pdf", output_folder, output_file_name)
output_file_prefix <- if (is.null(protein)) {
sprintf("protein_profiles_cruzi_%sSD", sd_multiplier_for_cutoff)
} else {
sprintf("protein_profiles_cruzi_%sSD_selected_proteins", sd_multiplier_for_cutoff)
}
output_file_name <- if (is.null(output_suffix)) {
sprintf("%s/%s_index.tsv", output_folder, output_file_prefix)
} else {
sprintf("%s/%s_%s_index.tsv", output_folder, output_file_prefix, output_suffix)
}
output_file_name
#### CALL MAIN FUNCTION ####
source(sprintf("%s/11_plot_protein_profiles_function.R", functions_folder))
plot_proteins(project_folder = project_folder,
input_folder = input_folder,
design_file = design_file,
sources = sources,
profile_data_suffix = profile_data_suffix,
output_folder = output_folder,
protein = protein,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
output_suffix = output_suffix)
args <- commandArgs(trailingOnly = TRUE)
args <- c(
"--protein", "TcCLB.511671.60",
"--profile_data_suffix", "mean_1_median_5"
)
# Default values
main_folder <- "."
testing <- TRUE
sources <- c("AR", "BO", "BR", "CO", "MX", "US", "LE")
profile_data_suffix <- "smoothed.tsv"
protein <- NULL
sd_multiplier_for_cutoff <- 4
only_proteins_above <- 0
only_proteins_below <- 0
output_suffix <- NULL
# User values
if (length(args) == 0) {
cat("No arguments provided. Using default values.\n")
} else {
# User values
for (i in seq(1, length(args), by = 2)) {
if (args[i] == "--main_folder") {
main_folder <- args[i + 1]
}
if (args[i] == "--testing") {
testing <- as.logical(args[i + 1])
}
if (args[i] == "--sources") {
sources <- unlist(strsplit(args[i + 1], ",")) # Divide sources si se pasan como cadena separada por comas
}
if (args[i] == "--profile_data_suffix") {
profile_data_suffix <- paste0(args[i + 1], "_smoothed.tsv")
output_suffix <- args[i + 1]
}
if (args[i] == "--protein") {
protein <- args[i + 1]
}
if (args[i] == "--sd_multiplier_for_cutoff") {
sd_multiplier_for_cutoff <- as.numeric(args[i + 1])
}
}
}
# Print values
cat("Main folder:", main_folder, "\n")
cat("Testing:", testing, "\n")
cat("Sources:", paste(sources, collapse = ", "), "\n")
cat("Profile data suffix:", profile_data_suffix, "\n")
cat("Protein (optional):", protein, "\n")
cat("SD multiplier for cutoff>", sd_multiplier_for_cutoff, "\n")
#### PATH CONFIG ####
if (testing == TRUE) {
# For testing
project_folder <- sprintf("%s/test_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
} else {
# For running the actual data
project_folder <- sprintf("%s/chagastope_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
}
input_folder <- sprintf("%s/outputs/02_pools_smoothed_data", project_folder)
design_file <- sprintf("%s/inputs/01_pools_array_design/Supplementary File S08 - Mapping of CHAGASTOPE-v1 data to T cruzi proteins.tsv", project_folder)
output_folder <- sprintf("%s/outputs/11_plots", project_folder)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
functions_folder <- sprintf("%s/functions", main_folder)
#### CALL MAIN FUNCTION ####
source(sprintf("%s/11_plot_protein_profiles_function.R", functions_folder))
plot_proteins(project_folder = project_folder,
input_folder = input_folder,
design_file = design_file,
sources = sources,
profile_data_suffix = profile_data_suffix,
output_folder = output_folder,
protein = protein,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
output_suffix = output_suffix)
output_file
#### CALL MAIN FUNCTION ####
source(sprintf("%s/11_plot_protein_profiles_function.R", functions_folder))
plot_proteins(project_folder = project_folder,
input_folder = input_folder,
design_file = design_file,
sources = sources,
profile_data_suffix = profile_data_suffix,
output_folder = output_folder,
protein = protein,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
output_suffix = output_suffix)
plot_proteins(project_folder = project_folder,
input_folder = input_folder,
design_file = design_file,
sources = sources,
profile_data_suffix = profile_data_suffix,
output_folder = output_folder,
protein = protein,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
output_suffix = output_suffix)
output_file_name
output_file_prefix <- if (is.null(protein)) {
sprintf("protein_profiles_cruzi_%sSD", sd_multiplier_for_cutoff)
} else {
sprintf("protein_profiles_cruzi_%sSD_selected_proteins", sd_multiplier_for_cutoff)
}
output_file_name <- if (is.null(output_suffix)) {
sprintf("%s/%s_index.tsv", output_folder, output_file_prefix)
} else {
sprintf("%s/%s_%s_index.tsv", output_folder, output_file_prefix, output_suffix)
}
output_file_name
write.table(index_data,
file = output_file_name,
col.names = TRUE,
row.names = FALSE,
sep = "\t",
quote = TRUE)
#############################-
#### Auxiliary Functions ####
#############################-
prepare_plot_data <- function(
project_folder,
input_folder,
profile_data_suffix,
sources,
protein,
output_folder,
sd_multiplier_for_cutoff,
only_proteins_above,
only_proteins_below
) {
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
output_file_prefix <- if (is.null(protein)) {
sprintf("protein_profiles_cruzi_%sSD", sd_multiplier_for_cutoff)
} else {
sprintf("protein_profiles_cruzi_%sSD_selected_proteins", sd_multiplier_for_cutoff)
}
output_file_name <- if (is.null(output_suffix)) {
sprintf("%s/%s_index.tsv", output_folder, output_file_prefix)
} else {
sprintf("%s/%s_%s_index.tsv", output_folder, output_file_prefix, output_suffix)
}
write.table(index_data,
file = output_file_name,
col.names = TRUE,
row.names = FALSE,
sep = "\t",
quote = TRUE)
return(list(all_plot_data = all_plot_data, plot_order = plot_order, proteins_to_plot = proteins_to_plot))
}
