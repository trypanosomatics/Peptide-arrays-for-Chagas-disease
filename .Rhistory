manual_lines_color = manual_cutoff_color, manual_lines_type = manual_cutoff_type, manual_lines_size = manual_cutoff_size)
}
p <- addFill(p = p, fill_alpha = fill_alpha)
p <- addLine(p = p, geom_line_size = geom_line_size)
p <- addPoint(p = p, geom_point_size = geom_point_size)
p <- setTheme_BW(p = p)
p <- formatAxis(p = p, axis_text_size = axis_text_size, axis_ticks_length = axis_ticks_length)
p <- formatBackground(p = p,
panel_grid_major_size = 0, panel_grid_minor_size = 0,
panel_background_size = panel_background_size)
p <- setPlotMargin(p = p, plot_margin_right = plot_margin_r, plot_margin_left = plot_margin_l)
p <- setPlotTitle(p = p, plot_title = plot_title, title_size = title_size)
p <- setXLabel(p = p, x_label = x_label, x_axis_title_size = axis_title_size)
p <- setYLabel(p = p, y_label = y_label, y_axis_title_size = axis_title_size)
if (manual_color_scale) {
p <- addManualColorScale(p = p, line_colors = line_colors, is_legend_visible = show_legend, legend_labels = legend_labels)
}
if (manual_fill_scale) {
p <- addManualFillScale(p = p, fill_colors = fill_colors, is_legend_visible = show_legend, legend_labels = fill_legend_labels)
}
if (manual_linetype_scale) {
p <- addManualLinetypeScale(p = p, line_linetypes = line_linetypes, is_legend_visible = show_legend, legend_labels = linetype_legend_labels)
}
if (show_errors) {
p <- addErrorBars(p = p, error_min_column = "error_min_column", error_max_column = "error_max_column",
geom_errorbar_size = geom_errorbar_size, geom_errorbar_width = geom_errorbar_width)
}
if (show_legend) {
p <- addLegend(p = p, legend_text_size = legend_text_size,
legend_x = legend_x, legend_y = legend_y,
legend_element_width = legend_element_width, legend_element_height = legend_element_height)
} else {
p <- addLegend(p = p, legend_text_size = 0)
}
if (fixed_scale) {
p <- addYScale(p = p, y_scale_max = fixed_scale_max)
} else {
#If its a dynamic scale, check if it has an error or just use the max point
if (show_errors) {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$error_max_column))
} else {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$y_column))
}
}
if (cutoff_above_plot == 1) {
p <- addHorizontalLines(p = p,
min_x = min(plot_data_aux$x_column), max_x = max(plot_data_aux$x_column), heights = cutoffs_y,
default_lines_color = "blue", default_lines_linetype = "dashed", default_lines_size = 0.5,
manual_lines_color = manual_cutoff_color, manual_lines_type = manual_cutoff_type, manual_lines_size = manual_cutoff_size)
}
p
}
plotProteinProfileDetailed_v3 <- function(plot_data, x_column_name, y_column_name, group_column_name, foreground_group, background_group,
cutoffs_y = c(),
plot_title = "", x_label = "X", y_label = "Y",
geom_point_size = 0.5,
geom_line_size = 0.5,
title_size = 16, axis_title_size = 16, axis_text_size = 16, axis_ticks_length = 0.2, panel_background_size = 1, plot_margin_l = 0.5, plot_margin_r = 0.5,
manual_color_scale = 0, legend_labels = c(), line_colors = c(),
manual_cutoff_color = c(), manual_cutoff_type = c(), manual_cutoff_size = c(), cutoff_above_plot = 1,
show_errors = 0, error_min_column_name = "", error_max_column_name = "", geom_errorbar_width = 1, geom_errorbar_size = 0.5,
show_legend = 0, legend_x = 0.8, legend_y = 0.9, legend_text_size = 12, legend_element_width = 2, legend_element_height = 1.5,
fixed_scale = 0, fixed_scale_max = 0) {
#This version I created to add the lines and dots for different groups in different
plot_data_aux <- plot_data
### This is a "trick" to unlink both data.tables, so the setnames doesn't change the name of the original one...
plot_data_aux[1] <- plot_data_aux[1]
setnames(plot_data_aux, x_column_name, "x_column")
setnames(plot_data_aux, y_column_name, "y_column")
setnames(plot_data_aux, group_column_name, "group_column")
plot_data_aux$group_column <- factor(plot_data_aux$group_column, levels = c(background_group, foreground_group))
if (show_errors) {
setnames(plot_data_aux, error_min_column_name, "error_min_column")
setnames(plot_data_aux, error_max_column_name, "error_max_column")
}
p <- ggplot()
if ((length(cutoffs_y) > 0) & (cutoff_above_plot == 0)) {
for (cutoff_i in 1:length(cutoffs_y)) {
line_color_for <- "blue"
line_type_for <- "dashed"
line_size_for <- 0.5
if (length(manual_cutoff_color) > 0) {
line_color_for <- manual_cutoff_color[cutoff_i]
}
if (length(manual_cutoff_type) > 0) {
line_type_for <- manual_cutoff_type[cutoff_i]
}
if (length(manual_cutoff_size) > 0) {
line_size_for <- manual_cutoff_size[cutoff_i]
}
p <- p + geom_segment(data = plot_data_aux, x = min(plot_data_aux$x_column), y = cutoffs_y[cutoff_i],
xend = max(plot_data_aux$x_column), yend = cutoffs_y[cutoff_i],
colour = line_color_for, linetype = line_type_for, size = line_size_for)
}
}
for (group_for in c(background_group, foreground_group)) {
p <- p + geom_line(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column"), size = geom_line_size) +
geom_point(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column"), size = geom_point_size)
if (show_errors) {
p <- p + geom_errorbar(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column", ymin = "error_min_column", ymax = "error_max_column"), size = geom_errorbar_size, width = geom_errorbar_width)
}
}
p <- setTheme_BW(p = p)
p <- formatAxis(p = p, axis_text_size = axis_text_size, axis_ticks_length = axis_ticks_length)
p <- formatBackground(p = p,
panel_grid_major_size = 0, panel_grid_minor_size = 0,
panel_background_size = panel_background_size)
p <- setPlotMargin(p = p, plot_margin_right = plot_margin_r, plot_margin_left = plot_margin_l)
p <- setPlotTitle(p = p, plot_title = plot_title, title_size = title_size)
p <- setXLabel(p = p, x_label = x_label, x_axis_title_size = axis_title_size)
p <- setYLabel(p = p, y_label = y_label, y_axis_title_size = axis_title_size)
if (manual_color_scale) {
p <- addManualColorScale(p = p, line_colors = line_colors, is_legend_visible = show_legend, legend_labels = legend_labels)
}
if (show_legend) {
p <- addLegend(p = p, legend_text_size = legend_text_size,
legend_x = legend_x, legend_y = legend_y,
legend_element_width = legend_element_width, legend_element_height = legend_element_height)
} else {
p <- addLegend(p = p, legend_text_size = 0)
}
if (fixed_scale) {
p <- addYScale(p = p, y_scale_max = fixed_scale_max)
} else {
#If its a dynamic scale, check if it has an error or just use the max point
if (show_errors) {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$error_max_column))
} else {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$y_column))
}
}
if ((length(cutoffs_y) > 0) & (cutoff_above_plot == 1)) {
for (cutoff_i in 1:length(cutoffs_y)) {
line_color_for <- "blue"
line_type_for <- "dashed"
line_size_for <- 0.5
if (length(manual_cutoff_color) > 0) {
line_color_for <- manual_cutoff_color[cutoff_i]
}
if (length(manual_cutoff_type) > 0) {
line_type_for <- manual_cutoff_type[cutoff_i]
}
if (length(manual_cutoff_size) > 0) {
line_size_for <- manual_cutoff_size[cutoff_i]
}
p <- p + geom_segment(data = plot_data_aux, x = min(plot_data_aux$x_column), y = cutoffs_y[cutoff_i],
xend = max(plot_data_aux$x_column), yend = cutoffs_y[cutoff_i],
colour = line_color_for, linetype = line_type_for, size = line_size_for)
}
}
p
}
#################################-
#### BACKWARDS COMPATIBILITY ####
#################################-
plotProteinProfileForSeveralProteins <- function(plot_data, x_column_name, y_column_name, group_column_name,
plot_title = "", x_label = "X", y_label = "Y",
manual_color_scale = 0, legend_labels = c(), line_colors = c(),
show_errors = 0, error_min_column_name = "", error_max_column_name = "",
show_legend = 0,
fixed_scale = 0, fixed_scale_max = 0) {
plotProteinProfile(plot_data = plot_data, x_column_name = x_column_name, y_column_name = y_column_name, group_column_name = group_column_name,
plot_title = plot_title, x_label = x_label, y_label = y_label,
manual_color_scale = manual_color_scale, legend_labels = legend_labels, line_colors = line_colors,
show_errors = show_errors, error_min_column_name = error_min_column_name, error_max_column_name = error_max_column_name,
show_legend = show_legend,
fixed_scale = fixed_scale, fixed_scale_max = fixed_scale_max)
}
plotProteinProfileForSeveralProteins_Bigger <- function(plot_data, x_column_name, y_column_name, group_column_name,
plot_title = "", x_label = "X", y_label = "Y",
manual_color_scale = 0, legend_labels = c(), line_colors = c(),
show_errors = 0, error_min_column_name = "", error_max_column_name = "",
show_legend = 0,
fixed_scale = 0, fixed_scale_max = 0) {
plotProteinProfile_Bigger(plot_data = plot_data, x_column_name = x_column_name, y_column_name = y_column_name, group_column_name = group_column_name,
plot_title = plot_title, x_label = x_label, y_label = y_label,
manual_color_scale = manual_color_scale, legend_labels = legend_labels, line_colors = line_colors,
show_errors = show_errors, error_min_column_name = error_min_column_name, error_max_column_name = error_max_column_name,
show_legend = show_legend,
fixed_scale = fixed_scale, fixed_scale_max = fixed_scale_max)
}
plot_data_aux <- plot_data
### This is a "trick" to unlink both data.tables, so the setnames doesn't change the name of the original one...
plot_data_aux[1] <- plot_data_aux[1]
setnames(plot_data_aux, x_column_name, "x_column")
setnames(plot_data_aux, y_column_name, "y_column")
setnames(plot_data_aux, group_column_name, "group_column")
plot_data_aux$group_column <- factor(plot_data_aux$group_column, levels = c(background_group, foreground_group))
if (show_errors) {
setnames(plot_data_aux, error_min_column_name, "error_min_column")
setnames(plot_data_aux, error_max_column_name, "error_max_column")
}
p <- ggplot()
if ((length(cutoffs_y) > 0) & (cutoff_above_plot == 0)) {
for (cutoff_i in 1:length(cutoffs_y)) {
line_color_for <- "blue"
line_type_for <- "dashed"
line_size_for <- 0.5
if (length(manual_cutoff_color) > 0) {
line_color_for <- manual_cutoff_color[cutoff_i]
}
if (length(manual_cutoff_type) > 0) {
line_type_for <- manual_cutoff_type[cutoff_i]
}
if (length(manual_cutoff_size) > 0) {
line_size_for <- manual_cutoff_size[cutoff_i]
}
p <- p + geom_segment(data = plot_data_aux, x = min(plot_data_aux$x_column), y = cutoffs_y[cutoff_i],
xend = max(plot_data_aux$x_column), yend = cutoffs_y[cutoff_i],
colour = line_color_for, linetype = line_type_for, size = line_size_for)
}
}
for (group_for in c(background_group, foreground_group)) {
p <- p + geom_line(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column"), size = geom_line_size) +
geom_point(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column"), size = geom_point_size)
if (show_errors) {
p <- p + geom_errorbar(data = plot_data_aux[group_column == group_for], aes_string(x = "x_column", y = "y_column", color = "group_column", ymin = "error_min_column", ymax = "error_max_column"), size = geom_errorbar_size, width = geom_errorbar_width)
}
}
p <- setTheme_BW(p = p)
p <- formatAxis(p = p, axis_text_size = axis_text_size, axis_ticks_length = axis_ticks_length)
p <- formatBackground(p = p,
panel_grid_major_size = 0, panel_grid_minor_size = 0,
panel_background_size = panel_background_size)
p <- setPlotMargin(p = p, plot_margin_right = plot_margin_r, plot_margin_left = plot_margin_l)
p <- setPlotTitle(p = p, plot_title = plot_title, title_size = title_size)
p <- setXLabel(p = p, x_label = x_label, x_axis_title_size = axis_title_size)
p <- setYLabel(p = p, y_label = y_label, y_axis_title_size = axis_title_size)
if (manual_color_scale) {
p <- addManualColorScale(p = p, line_colors = line_colors, is_legend_visible = show_legend, legend_labels = legend_labels)
}
if (show_legend) {
p <- addLegend(p = p, legend_text_size = legend_text_size,
legend_x = legend_x, legend_y = legend_y,
legend_element_width = legend_element_width, legend_element_height = legend_element_height)
} else {
p <- addLegend(p = p, legend_text_size = 0)
}
if (fixed_scale) {
p <- addYScale(p = p, y_scale_max = fixed_scale_max)
} else {
#If its a dynamic scale, check if it has an error or just use the max point
if (show_errors) {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$error_max_column))
} else {
p <- addYScale(p = p, y_scale_max = max(plot_data_aux$y_column))
}
}
if ((length(cutoffs_y) > 0) & (cutoff_above_plot == 1)) {
for (cutoff_i in 1:length(cutoffs_y)) {
line_color_for <- "blue"
line_type_for <- "dashed"
line_size_for <- 0.5
if (length(manual_cutoff_color) > 0) {
line_color_for <- manual_cutoff_color[cutoff_i]
}
if (length(manual_cutoff_type) > 0) {
line_type_for <- manual_cutoff_type[cutoff_i]
}
if (length(manual_cutoff_size) > 0) {
line_size_for <- manual_cutoff_size[cutoff_i]
}
p <- p + geom_segment(data = plot_data_aux, x = min(plot_data_aux$x_column), y = cutoffs_y[cutoff_i],
xend = max(plot_data_aux$x_column), yend = cutoffs_y[cutoff_i],
colour = line_color_for, linetype = line_type_for, size = line_size_for)
}
}
p
group_column_name
main_folder <- "/home/buscaloneta/Documentos/Guada/Array/Peptide-arrays-for-Chagas-disease"
testing <- TRUE
sources <- c("AR", "BO", "BR", "CO", "MX", "US", "LE")
profile_data_suffix <- "smoothed.tsv"
protein <- NULL
sd_multiplier_for_cutoff <- 4
only_proteins_above <- 0
only_proteins_below <- 0
####PATH CONFIG####
if (testing == TRUE) {
# For testing
project_folder <- sprintf("%s/test_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
} else {
# For running the actual data
project_folder <- sprintf("%s/chagastope_data", main_folder)
extra_files_folder <- sprintf("%s/extra_files", main_folder)
}
input_folder <- sprintf("%s/outputs/02_pools_smoothed_data", project_folder)
design_file <- sprintf("%s/inputs/01_pools_array_design/Supplementary File S08 - Mapping of CHAGASTOPE-v1 data to T cruzi proteins.tsv", project_folder)
output_folder <- sprintf("%s/outputs/11_plots", project_folder)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
project_folder
input_folder
# CALCULATE CUTOFF
normalization_global_statistics_file <- sprintf("%s/outputs/01_pools_normalized_data/global_statistics.tsv", project_folder)
normalization_global_statistics <- fread(normalization_global_statistics_file, header = TRUE, sep = "\t", na.strings = NULL)
mode_aux <- normalization_global_statistics$mode
sd_aux <- normalization_global_statistics$sd
# PLOT DATA
plot_data_folder <- input_folder
plot_data_file_suffix <- profile_data_suffix
output_file_prefix <- sprintf("protein_profiles_cruzi_withLE_%sSD", sd_multiplier_for_cutoff)
has_negative_data <- 0
positive_serum_label <- "Positive serum"
negative_serum_label <- "Negative serum"
threshold_label <- "Threshold"
pdf_height <- 21
#################################-
#### LOAD THE DATA NECESSARY ####
#################################-
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
#protein = "TCSYLVIO_001348"
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
plot_order
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
proteins_to_plot
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
write.table(index_data, file = sprintf("%s/%s_index.tsv", output_folder, output_file_prefix), col.names = T, row.names = F, sep = "\t", quote = T)
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
prepare_plot_data <- function(
project_folder,
input_folder,
profile_data_suffix,
sources,
protein,
output_folder,
sd_multiplier_for_cutoff,
only_proteins_above,
only_proteins_below
) {
# CALCULATE CUTOFF
normalization_global_statistics_file <- sprintf("%s/outputs/01_pools_normalized_data/global_statistics.tsv", project_folder)
normalization_global_statistics <- fread(normalization_global_statistics_file, header = TRUE, sep = "\t", na.strings = NULL)
mode_aux <- normalization_global_statistics$mode
sd_aux <- normalization_global_statistics$sd
# PLOT DATA
plot_data_folder <- input_folder
plot_data_file_suffix <- profile_data_suffix
output_file_prefix <- sprintf("protein_profiles_cruzi_withLE_%sSD", sd_multiplier_for_cutoff)
has_negative_data <- 0
positive_serum_label <- "Positive serum"
negative_serum_label <- "Negative serum"
threshold_label <- "Threshold"
pdf_height <- 21
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
#protein = "TCSYLVIO_001348"
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
write.table(index_data, file = sprintf("%s/%s_index.tsv", output_folder, output_file_prefix),
col.names = T, row.names = F, sep = "\t", quote = T)
return(list(all_plot_data = all_plot_data, plot_order = plot_order, proteins_to_plot = proteins_to_plot))
}
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
protein <- NULL
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
protein
!is.null(protein)
is.null(protein)
# CALCULATE CUTOFF
normalization_global_statistics_file <- sprintf("%s/outputs/01_pools_normalized_data/global_statistics.tsv", project_folder)
normalization_global_statistics <- fread(normalization_global_statistics_file, header = TRUE, sep = "\t", na.strings = NULL)
mode_aux <- normalization_global_statistics$mode
sd_aux <- normalization_global_statistics$sd
# PLOT DATA
plot_data_folder <- input_folder
plot_data_file_suffix <- profile_data_suffix
output_file_prefix <- sprintf("protein_profiles_cruzi_withLE_%sSD", sd_multiplier_for_cutoff)
has_negative_data <- 0
positive_serum_label <- "Positive serum"
negative_serum_label <- "Negative serum"
threshold_label <- "Threshold"
pdf_height <- 21
# LOAD THE DATA NECESSARY
input_files <- list.files(input_folder, pattern = profile_data_suffix, full.names = TRUE)
input_files <- input_files[grepl(paste(sources, collapse = "|"), input_files)]
if (length(input_files) == 0) {
stop("No files found matching the given profile_data_suffix and sources.")
}
# Get data
all_plot_data <- do.call(rbind, lapply(input_files, read.delim, stringsAsFactors = FALSE))
# Filter by protein
#protein = "TCSYLVIO_001348"
if (!is.null(protein)) {
all_plot_data <- all_plot_data[all_plot_data$protein == protein, ]
if (nrow(all_plot_data) == 0) {
stop(paste("No data found for the specified protein:", protein))
}
}
# Order
setDT(all_plot_data)
plot_order <- all_plot_data[type == "PO", .(signal = sum(mean_smoothed_signal)), by = .(protein, start)]
plot_order <- plot_order[, .(signal = max(signal)), by = .(protein)]
plot_order <- plot_order[order(-signal)]
proteins_to_plot <- all_plot_data[type == "PO", .(max_signal = max(mean_smoothed_signal)), by = .(protein)]
if (only_proteins_above > 0) {
proteins_to_plot <- proteins_to_plot[max_signal >= only_proteins_above]
}
if (only_proteins_below > 0) {
proteins_to_plot <- proteins_to_plot[max_signal <= only_proteins_below]
}
proteins_to_plot <- plot_order[protein %in% proteins_to_plot$protein]$protein
# Save the index
index_data <- data.table(protein = proteins_to_plot)
index_data[, page := .I]
write.table(index_data, file = sprintf("%s/%s_index.tsv", output_folder, output_file_prefix),
col.names = T, row.names = F, sep = "\t", quote = T)
return(list(all_plot_data = all_plot_data, plot_order = plot_order, proteins_to_plot = proteins_to_plot))
plot_data_result <- prepare_plot_data(
project_folder = project_folder,
input_folder = input_folder,
protein = protein,
profile_data_suffix = profile_data_suffix,
sources = sources,
output_folder = output_folder,
sd_multiplier_for_cutoff = sd_multiplier_for_cutoff,
only_proteins_above = only_proteins_above,
only_proteins_below = only_proteins_below
)
all_plot_data <- plot_data_result$all_plot_data
plot_order <- plot_data_result$plot_order
proteins_to_plot <- plot_data_result$proteins_to_plot
View(all_plot_data)
View(plot_order)
